from __future__ import absolute_import

import sys
from argparse import ArgumentParser

from metagenomix import __version__
from metagenomix.io.datainput import load_input_in_database, load_blast_aln_in_database


def get_input_option_parser():
	parser = ArgumentParser(usage="""store-input-to-db [OPTIONS] <INPUT-FILE> <FORMAT> <DB-FILE>
Utility to store the input file in a relational database for
ease of access.
""",
						    version=__version__)
	parser.add_argument(metavar="<INPUT-FILE>", dest="input_file",
		help="Input file containing reads")
	parser.add_argument(metavar="<FORMAT>", dest="format", type=str,
		help="Format of the input read file",
		choices=('fasta', 'fastq'))
	parser.add_argument(metavar="<DB-FILE>", dest="db_file",
		help="Database file where the read table will be stored")
	parser.add_argument("--store-seqs", action="store_true", dest="store_seqs",
		help="If true, all the sequences will be stored in the database as well.")
        return parser

def get_aln_option_parser():
	parser = ArgumentParser(usage="""store-aln-to-db <BLAST-ALN-FILE> <DB-FILE>
Utility to store the alignment data in a relational database for
ease of access.""",
							version=__version__)
	parser.add_argument(metavar="<BLAST-ALN-FILE>", dest="aln_file",
		help="Input file containing alignment generated by blast/megablast")
	parser.add_argument(metavar="<DB-FILE>", dest="db_file",
		help="Database file where the read table will be stored")
        return parser

def store_input():
	parser = get_input_option_parser()
	namespace = parser.parse_args()
	load_input_in_database(namespace.db_file, namespace.input_file, namespace.format, namespace.store_seqs)

def store_aln():
	parser = get_aln_option_parser()
	namespace = parser.parse_args()
	load_blast_aln_in_database(namespace.db_file, namespace.aln_file)
